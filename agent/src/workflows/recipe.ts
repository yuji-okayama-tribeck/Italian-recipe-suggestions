import { createWorkflowChain } from "@voltagent/core";
import { z } from "zod";

// ==============================================================================
// Italian Recipe Generation Workflow
// This workflow handles the complete process of generating Italian recipes
// from user-provided ingredients with multiple variations and suggestions.
//
// Test Scenarios:
//
// Scenario 1: Basic recipe generation
// Input JSON:
// {
//   "ingredients": ["tomatoes", "basil", "mozzarella", "pasta"],
//   "preferences": {
//     "difficulty": "easy",
//     "cookingTime": 30,
//     "servings": 4
//   },
//   "includeVariations": true
// }
//
// Scenario 2: Complex recipe with dietary restrictions
// Input JSON:
// {
//   "ingredients": ["eggplant", "zucchini", "bell peppers", "onion", "garlic"],
//   "preferences": {
//     "difficulty": "medium",
//     "servings": 6,
//     "dietaryRestrictions": ["vegetarian"]
//   },
//   "includeVariations": true,
//   "requestedVariations": ["vegan", "gluten-free"]
// }
//
// Scenario 3: Quick recipe with limited ingredients
// Input JSON:
// {
//   "ingredients": ["pasta", "olive oil", "garlic", "parmesan"],
//   "preferences": {
//     "difficulty": "easy",
//     "cookingTime": 15,
//     "servings": 2
//   },
//   "includeVariations": false
// }
// ==============================================================================

export const italianRecipeWorkflow = createWorkflowChain({
  id: "italian-recipe-generation",
  name: "Italian Recipe Generation Workflow",
  purpose: "Generate authentic Italian recipes with variations based on provided ingredients",

  input: z.object({
    ingredients: z.array(z.string().min(1)).min(1).describe("List of available ingredients"),
    preferences: z.object({
      difficulty: z.enum(["easy", "medium", "hard"]).optional().default("medium"),
      cookingTime: z.number().min(5).max(240).optional().describe("Maximum cooking time in minutes"),
      servings: z.number().min(1).max(20).optional().default(4),
      dietaryRestrictions: z.array(z.enum(["vegetarian", "vegan", "gluten-free"])).optional().default([]),
    }).optional().default({}),
    includeVariations: z.boolean().optional().default(true),
    requestedVariations: z.array(z.enum(["vegetarian", "vegan", "gluten-free", "spicy", "creamy", "light"])).optional().default([]),
  }),

  result: z.object({
    mainRecipe: z.object({
      recipeName: z.string(),
      description: z.string(),
      ingredients: z.array(z.object({
        name: z.string(),
        amount: z.string(),
        unit: z.string(),
      })),
      instructions: z.array(z.string()),
      cookingTime: z.number(),
      difficulty: z.string(),
      servings: z.number(),
      tips: z.array(z.string()),
      cuisine: z.literal("Italian"),
    }),
    variations: z.array(z.object({
      variationName: z.string(),
      modificationType: z.string(),
      ingredients: z.array(z.object({
        name: z.string(),
        amount: z.string(),
        unit: z.string(),
        substitution: z.boolean().optional(),
      })),
      instructions: z.array(z.string()),
      substitutions: z.array(z.object({
        original: z.string(),
        replacement: z.string(),
        reason: z.string(),
      })),
    })).optional(),
    ingredientAnalysis: z.object({
      compatibility: z.string(),
      suggestedDishTypes: z.array(z.string()),
      recommendedAdditions: z.array(z.string()),
      difficultyAssessment: z.string(),
    }),
  }),
})

  // Step 1: Analyze ingredients for Italian cuisine compatibility
  .andThen({
    id: "analyze-ingredients",
    execute: async ({ data }) => {
      console.log(`Analyzing ${data.ingredients.length} ingredients for Italian recipe compatibility`);
      
      // This step would use the ingredientAnalysisTool
      const analysis = {
        compatibility: data.ingredients.length >= 3 ? "high" : "medium",
        suggestedDishTypes: ["pasta", "risotto", "pizza"], // This would be determined by AI
        recommendedAdditions: ["olive oil", "garlic", "herbs"], // This would be determined by AI
        difficultyAssessment: data.preferences?.difficulty || "medium",
      };

      return {
        ...data,
        ingredientAnalysis: analysis,
      };
    },
  })

  // Step 2: Generate main Italian recipe
  .andThen({
    id: "generate-main-recipe",
    execute: async ({ data }) => {
      console.log(`Generating main Italian recipe with ${data.ingredients.join(", ")}`);
      
      // This step would use the italianRecipeTool
      // For now, we'll create a mock recipe structure
      const mainRecipe = {
        recipeName: `Italian ${data.ingredients[0]} Dish`, // This would be generated by AI
        description: `A delicious Italian recipe featuring ${data.ingredients.join(", ")}`,
        ingredients: data.ingredients.map(ingredient => ({
          name: ingredient,
          amount: "to taste", // This would be determined by AI
          unit: "",
        })),
        instructions: [
          "Prepare all ingredients",
          "Follow traditional Italian cooking methods",
          "Season to taste",
          "Serve hot",
        ], // This would be generated by AI
        cookingTime: data.preferences?.cookingTime || 30,
        difficulty: data.preferences?.difficulty || "medium",
        servings: data.preferences?.servings || 4,
        tips: ["Use high-quality ingredients", "Don't overcook"], // This would be generated by AI
        cuisine: "Italian" as const,
      };

      return {
        ...data,
        mainRecipe,
      };
    },
  })

  // Step 3: Generate recipe variations (if requested)
  .andThen({
    id: "generate-variations",
    execute: async ({ data }) => {
      if (!data.includeVariations) {
        console.log("Skipping variations as not requested");
        return data;
      }

      console.log(`Generating recipe variations: ${data.requestedVariations?.join(", ") || "default variations"}`);
      
      const variationsToGenerate = data.requestedVariations && data.requestedVariations.length > 0 
        ? data.requestedVariations 
        : ["vegetarian", "light"]; // Default variations

      const variations = variationsToGenerate.map(variationType => ({
        variationName: `${data.mainRecipe.recipeName} (${variationType})`,
        modificationType: variationType,
        ingredients: data.mainRecipe.ingredients.map(ingredient => ({
          ...ingredient,
          substitution: false, // This would be determined by AI
        })),
        instructions: data.mainRecipe.instructions, // This would be modified by AI
        substitutions: [], // This would be generated by AI
      }));

      return {
        ...data,
        variations,
      };
    },
  })

  // Step 4: Finalize and format the complete recipe response
  .andThen({
    id: "finalize-recipe",
    execute: async ({ data }) => {
      console.log(`Finalizing recipe: ${data.mainRecipe.recipeName}`);
      
      // Final validation and formatting
      const result = {
        mainRecipe: data.mainRecipe,
        variations: data.variations,
        ingredientAnalysis: data.ingredientAnalysis,
      };

      console.log(`Recipe generation complete. Generated ${data.variations?.length || 0} variations.`);
      
      return result;
    },
  });